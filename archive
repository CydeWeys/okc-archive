#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use autodie;
use WWW::Mechanize;
use Config::Tiny;
use FindBin qw($Bin);

@ARGV or die "Usage: $0 thread-url\n";

my $thread = shift @ARGV;

# Switch to https if not already specified.
$thread =~ s{http:}{https:};

my $mech = WWW::Mechanize->new;

# Let's make sure OKC returns code similar to what I'll see in
# Firefox.  (Also let's not be quite so obviously a bot...)

$mech->agent_alias('Linux Mozilla');

# TODO: Maybe use XDG paths?
my $config = Config::Tiny->read("$Bin/auth.ini");

unless ($config->{auth}{username}) {
    say "Hey, you need a `$Bin/auth.ini` file that looks like this:\n";
    say "[auth]\n",
        "username=your_username\n",
        "password=your_password\n"
    ;
    exit 1;
}

# Login dance!

$mech->get("https://www.okcupid.com/login");

$mech->submit_form(
    form_id   => 'login_form',
    fields    => {
        username => $config->{auth}{username},
        password => $config->{auth}{password},
    },
);


# Fetch the message thread specified
$mech->get($thread);

my $content = $mech->content;

# say $content;

# We started off trying to use XPath, but OKC doens't exactly return
# well-formed XML. Instead, we'll use hacks...

while ($content =~ m{
    <a[^>]*href="/profile/(?<from>\w+)[^"]*"[^>]*class="photo"
    .*?
    <div\s*class="message"[^>]*>(?<content>.*?)</div>\s*</li>
}msgx) {

    my $from = $+{from};
    my $msg  = $+{content};

    $msg =~ s{<div class="message_body">}{\n}msg;
    $msg =~ s{<script>.*?</script>}{}msg;
    $msg =~ s{</?(?:br|div)[^>]*/?>}{\n}msg;
    $msg =~ s{</?span[^>]*>}{}msg;
    $msg =~ s{<a [^>]*>}{}msg;
    $msg =~ s{</a>}{}msg;
    $msg =~ s{^[ ]*}{}msg;

    say "[$from]\n$msg";
    say "-" x 70;
}

__END__

# Burn the contents of various sections that may contain malformed
# XML.

$content =~ s{<head>.*?</head>}{<head></head>}sm;
$content =~ s{<script[^>]*>.*?</script>}{}smg;
$content =~ s{&rsquo;}{'}smg;
$content =~ s{&raquo;}{'}smg;
$content =~ s{&hellip;}{...}smg;

# Now extract the thread

say $content;

__END__

my $xp = XML::XPath->new(xml => $content);

say $xp->findnodes_as_string(q{//ul[@id='thread'});
